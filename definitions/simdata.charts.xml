<TelemetryDefinitions>

<!-- Two charts that were defined originally to support the SimData Telemetry scenarios. -->

<TelemetryDefinition Name="MemberTrends" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating a single project member's DevTime, Build
counts, Unit Test invocations, Commits, and Churn. Data is non-cumulative over time.
  </Description>

 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose trend data is to be returned.  If "*", then the aggregrate 
      trend data for all project members is returned.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
chart MemberTrends(member) = {
  "DevTime, Build, UnitTest, Commit, and Churn for a single developer", 
  (UnitTestStream("TotalCount", member, "false"), yAxisBounded20("UnitTest invocations")), 
  (DevTimeStream(member, "false"), yAxisBounded20("DevTime hours")), 
  (BuildStream(member, "*", "*", "false"), yAxisBounded20("Build invocations")), 
  (CommitStream(member, "false"), yAxisBounded10("Commit counts")), 
  (ChurnStream(member, "false"), yAxisBounded50("Churn counts")) 
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="ProductDevTrends" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides insight into product development trends including: Size, Churn, Commit, Build, and 
DevTime. All data is non-cumulative.
  </Description>

  <SourceCode>
<![CDATA[
chart ProductDevTrends() = {
  "Coverage, Size, Churn, Commit, UnitTest, Build, CodeIssue, and DevTime", 
  (FileMetricStream("TotalLines", "SCLC"), yAxisBounded50("Total LOC")),
  (ChurnStream("*", "false"), yAxisBounded50("Churn count")),
  (CommitStream("*", "false"), yAxisBounded50("Commit count")),
  (BuildStream("*", "*", "*", "false"), yAxisBounded50("Build invocations")),
  (DevTimeStream("*", "false"), yAxisBounded50("DevTime hours"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="ProductQATrends" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides insight into product quality assurance trends including: Coverage, Test Invocations, and 
Code Issues. All data is non-cumulative.
  </Description>

  <SourceCode>
<![CDATA[
chart ProductQATrends() = {
  "Coverage, Size, Churn, Commit, UnitTest, Build, CodeIssue, and DevTime", 
  (CoverageStream("Percentage", "line"), yAxisPercentage("Coverage percentage")),
  (CyclomaticComplexityStream("AverageComplexityPerMethod", "10", "JavaNCSS"), yAxisBounded50("Average Complexity per Method")),
  (UnitTestStream("TotalCount", "*", "false"), yAxisBounded50("UnitTest invocations")),
  (CodeIssueStream("*", "*"), yAxisBounded50("CodeIssue counts"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxisBounded50" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, sets the bounds to 0-50, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxisBounded50(label) = {
  label, "integer", 0, 50
};
]]>
  </SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxisBounded10" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, sets the bounds to 0-10, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxisBounded10(label) = {
  label, "integer", 0, 10
};
]]>
  </SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxisBounded20" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, sets the bounds to 0-20, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxisBounded20(label) = {
  label, "integer", 0, 20
};
]]>
  </SourceCode>
</TelemetryDefinition>   

</TelemetryDefinitions>
