<TelemetryDefinitions>

<!-- 
     The definitions in this file are the "essential", "minimal" definitions necessary 
     to support testing.  Basically, for each reduction function, this file creates a 
     Streams and Chart wrapper around it that provide access to all parameters and that
     enables the reduction function to be tested using these definitions.  
      
     If you want to provide additional telemetry definitions for actual users, then put
     them in the definitions/ directory. 
  -->

<TelemetryDefinition Name="MemberDevTime" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating the DevTime associated with given project member.
DevTime measures the time during which developers are actively interacting with their
development tools at the grain size of five minutes.  
  </Description>

  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the chart displays cumulative values over time. 
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
chart MemberDevTime(cumulative) = {
  "Dev Time in hours for each member", 
  (MemberDevTimeStream(cumulative), yAxisZeroBased("Hours"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->
<TelemetryDefinition Name="DevTime" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the DevTime associated with a given project member or
the aggregate DevTime for all project members. 
DevTime measures the time during which developers are actively interacting with their
development tools at the grain size of five minutes.  
  </Description>

  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose DevTime is to be returned.  If "*", then the aggregrate 
      DevTime for all project members is returned.
    </Description>
  </Parameter>

  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the chart displays cumulative values over time. 
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
chart DevTime(member, cumulative) = {
  "Dev Time in hours", 
  (DevTimeStream(member, cumulative), yAxisZeroBased("Hours"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="UnitTest" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the UnitTest invocation counts associated with all
developers for the specified mode.  
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
   </Type>
    <Description>
      Specifies whether to return the total number of unit test invocations, or just the 
number of succeeding (or failing) unit test invocations.
    </Description>
  </Parameter>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Unit Test counts are to be returned.  If "*", then the aggregrate 
      Unit Test counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart UnitTest(mode, member, cumulative) = {
  "Unit test invocations", 
  (UnitTestStream(mode, member, cumulative), yAxisZeroBased("UnitTest Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberUnitTest" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating the UnitTest invocation counts associated with each
member of the project for the specified mode.  
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
   </Type>
    <Description>
      Specifies whether to return the total number of unit test invocations, or just the 
number of succeeding (or failing) unit test invocations.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart MemberUnitTest(mode, cumulative) = {
  "Unit test invocations", 
  (MemberUnitTestStream(mode, cumulative), yAxisZeroBased("UnitTest Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>    

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Commit" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Commit counts associated with the
specified developers.
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Commit counts are to be returned.  If "*", then the aggregrate 
      Unit Test counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Commit(member, cumulative) = {
  "Commit invocations", 
  (CommitStream(member, cumulative), yAxisZeroBased("Commit Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberCommit" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating the Commit counts associated with each 
developer in this project. 
  </Description>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart MemberCommit(cumulative) = {
  "Commit counts for each project member", 
  (MemberCommitStream(cumulative), yAxisZeroBased("Commit Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   
   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Churn" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Churn counts associated with the
specified developers.
Churn is defined as the lines added plus the lines deleted, as reported by Commit sensor data.
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose churn counts are to be returned.  If "*", then the aggregrate 
      churn counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Churn(member, cumulative) = {
  "Churn counts", 
  (ChurnStream(member, cumulative), yAxisZeroBased("Churn Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberChurn" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating the Churn counts associated with
each project member.
Churn is defined as the lines added plus the lines deleted, as reported by Commit sensor data.
  </Description>
   <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart MemberChurn(cumulative) = {
  "Member Churn counts", 
  (MemberChurnStream(cumulative), yAxisZeroBased("Churn Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   


<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Coverage" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Coverage level for the given mode and granularity.
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="Percentage">
      <Value>Percentage</Value>
      <Value>NumCovered</Value>
      <Value>NumUncovered</Value>
   </Type>
    <Description>
      Specifies the type of count to return, either the percentage covered or the absolute numbers
      of covered or uncovered constructs. 
    </Description>
  </Parameter>
 <Parameter Name="granularity">
    <Type Name="Text" Default="method"/>
    <Description>
      The type of coverage to look for in the sensor data, such as 'line', 'method', 'class', etc.
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Coverage(mode, granularity) = {
  "Coverage associated with this project, mode, and granularity", 
  (CoverageStream(mode, granularity), yAxisPercentage("Coverage"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CyclomaticComplexity" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream providing information about cyclomatic complexity. 
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="AverageComplexityPerMethod">
      <Value>TotalMethods</Value>
      <Value>TotalLines</Value>
      <Value>AverageComplexityPerMethod</Value>
      <Value>TotalMethodsAboveComplexityThreshold</Value>
   </Type>
    <Description>
      Specifies the type of complexity data to return, either the total number of methods used
to generate the complexity values, the total lines of code used to generate the complexity values,
the average complexity per method, or the total number of methods found with a complexity value
at or above the specified threshold.
    </Description>
  </Parameter>
 <Parameter Name="threshold">
   <Type Name="Integer" Default="10" MinValue="0" MaxValue="1000"/>
    <Description>
      The threshold complexity value used when the mode is TotalMethodsAboveComplexityThreshold.
    </Description>
  </Parameter>
<Parameter Name="tool">
   <Type Name="Text" Default="JavaNCSS"/>
    <Description>
      The tool whose sensor data is used to generate this complexity data. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart CyclomaticComplexity(mode, threshold, tool) = {
  "Complexity associated with this project, mode, threshold, and tool.", 
  (CyclomaticComplexityStream(mode, threshold, tool), yAxisZeroBased("Cyclomatic Complexity"))
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Coupling" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream providing information about coupling.
  </Description>
 <Parameter Name="coupling">
   <Type Name="Enumerated" Default="All">
      <Value>Afferent</Value>
      <Value>Efferent</Value>
      <Value>All</Value>
   </Type>
    <Description>
  Specifies the kind of coupling data to process. Afferent indicates incoming dependencies, or the 
objects that depend upon a given program unit (such as a class or package).  Efferent indicates
outgoing dependencies, or the objects that a given program unit depends upon.  All indicates
both afferent and efferent couplings. 
    </Description>
  </Parameter>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="Average">
      <Value>Total</Value>
      <Value>Average</Value>
      <Value>TotalInstancesAboveThreshold</Value>
   </Type>
    <Description>
      Specifies whether to return the total number of couplings per the specified coupling type,
or the average number of couplings per the specified coupling type, or the total number of 
program units (such as classes or packages) whose coupling type is above the given threshold 
(specified below).
    </Description>
  </Parameter>
 <Parameter Name="type">
   <Type Name="Text" Default="class"/>
    <Description>
      Specifies the type of program unit whose coupling data will be processed.  This value 
depends upon the tool's capabilities. For example, the DependencyFinder sensor sends data for 
the 'class' level of program unit, while JDepend sends sensor data for the 'package' level of 
program unit. 
    </Description>
  </Parameter>
 <Parameter Name="threshold">
   <Type Name="Integer" Default="10" MinValue="0" MaxValue="1000"/>
    <Description>
      The threshold coupling value used when the mode is TotalAboveThreshold.
    </Description>
  </Parameter>
<Parameter Name="tool">
   <Type Name="Text" Default="DependencyFinder"/>
    <Description>
      The tool whose sensor data is used to generate this coupling data. 
    </Description>
  </Parameter> 
  <SourceCode>
<![CDATA[
chart Coupling(coupling, mode, type, threshold, tool) = {
  "Coupling associated with this project, coupling, mode, type, threshold, and tool.", 
  (CouplingStream(coupling, mode, type, threshold, tool), yAxisZeroBased("Coupling"))
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="FileMetric" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating FileMetrics of the given size metric.
  </Description>
 <Parameter Name="sizemetric">
    <Type Name="Text" Default="TotalLines"/>
    <Description>
      The type of size metric to search for in the FileMetric entries. 
    </Description>
  </Parameter>
 <Parameter Name="tool">
    <Type Name="Text" Default="*"/>
    <Description>
      The tool whose FileMetric data is to be retrieved, or '*' for any tool.
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart FileMetric(sizemetric, tool) = {
  "FileMetrics associated with this size metric.", 
  (FileMetricStream(sizemetric, tool), yAxis(sizemetric))
};
]]>
  </SourceCode>
</TelemetryDefinition> 
 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CodeIssue" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the count of CodeIssues for the given tool and type.
  </Description>
 <Parameter Name="tool">
    <Type Name="Text" Default="*"/>
    <Description>
      The tool whose CodeIssue counts are to be returned, or '*' for all tools.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The type of CodeIssue whose counts are to be returned, or '*' for all types.
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart CodeIssue(tool, type) = {
  "CodeIssues for the given tool and type.", 
  (CodeIssueStream(tool, type), yAxisZeroBased("CodeIssue Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Build" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Build invocation counts for the specified
developer, result, type, and cumulative values.
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Build counts are to be returned.  If "*", then the aggregrate 
      Build counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="result">
   <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
   </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or both successful and
failing builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property to match in order for the Build data to be counted. This is
      useful, for example, for generating Build telemetry for only Integration Builds. 
      The default returns Build data for any type.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Build(member, result, type, cumulative) = {
  "Build invocations", 
  (BuildStream(member, result, type, cumulative), yAxisZeroBased("Build Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   
 
<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberBuild" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a set of streams indicating the Build invocation counts for each
developer in the project, parameterized by result, type, and cumulative values.
  </Description>
  <Parameter Name="result">
   <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
   </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or both successful and failing builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property to match in order for the Build data to be counted. This is
      useful, for example, for generating Build telemetry for only Integration Builds. 
      The default returns Build data for any type.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart MemberBuild(result, type, cumulative) = {
  "Build invocations", 
  (MemberBuildStream(result, type, cumulative), yAxisZeroBased("Build Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>  

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Issue" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Issue counts associated with the
specified developers.
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Issues counts are to be returned.  If "*", then the aggregrate 
      Issue counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="status">
    <Type Name="Test" Default="all"/>
    <Description>
      The status of the issues that counts. Can be "all", "open", "closed" 
      or any other specified issue status such as "Accepted" or "Fixed". 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Issue(member, status) = {
  "Issue invocations", 
  (IssueStream(member, status), yAxisZeroBased("Issue Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberDevTimeStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
Provides a set of streams indicating the DevTime associated with each
project member. If the cumulative parameter
is true, then the trend line represents the cumulative DevTime. If false, then
the trend line represents the total DevTime for each period individually.
  </Description>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams MemberDevTimeStream(cumulative) = {
  "Dev time for this Project", 
  MemberDevTime("*", "**", cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="DevTimeStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream provides a single stream indicating the DevTime associated with the given 
project member. If the member parameter is "*", then the single stream represents the aggregate
DevTime for all members.   If the cumulative parameter
is true, then the trend line represents the cumulative DevTime. If false, then
the trend line represents the total DevTime for each period individually.
  </Description>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose DevTime to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams DevTimeStream(member, cumulative) = {
  "Dev time for this Project", 
  DevTime("*", member, "**", cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CyclomaticComplexityStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream provides a single stream providing information about cyclomatic complexity. 
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="AverageComplexityPerMethod">
      <Value>TotalMethods</Value>
      <Value>TotalLines</Value>
      <Value>AverageComplexityPerMethod</Value>
      <Value>TotalMethodsAboveComplexityThreshold</Value>
   </Type>
    <Description>
      Specifies the type of complexity data to return, either the total number of methods used
to generate the complexity values, the total lines of code used to generate the complexity values,
the average complexity per method, or the total number of methods found with a complexity value
at or above the specified threshold.
    </Description>
  </Parameter>
 <Parameter Name="threshold">
   <Type Name="Integer" Default="10" MinValue="0" MaxValue="1000"/>
    <Description>
      The threshold complexity value used when the mode is TotalMethodsAboveComplexityThreshold.
    </Description>
  </Parameter>
<Parameter Name="tool">
   <Type Name="Text" Default="JavaNCSS"/>
    <Description>
      The tool whose sensor data is used to generate this complexity data. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
streams CyclomaticComplexityStream(mode, threshold, tool) = {
  "Complexity associated with this project, mode, threshold, and tool.", 
  CyclomaticComplexity(mode, threshold, tool)
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CouplingStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream provides a single stream providing information about coupling.
  </Description>
 <Parameter Name="coupling">
   <Type Name="Enumerated" Default="All">
      <Value>Afferent</Value>
      <Value>Efferent</Value>
      <Value>All</Value>
   </Type>
    <Description>
  Specifies the kind of coupling data to process. Afferent indicates incoming dependencies, or the 
objects that depend upon a given program unit (such as a class or package).  Efferent indicates
outgoing dependencies, or the objects that a given program unit depends upon.  All indicates
both afferent and efferent couplings. 
    </Description>
  </Parameter>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="Average">
      <Value>Total</Value>
      <Value>Average</Value>
      <Value>TotalInstancesAboveThreshold</Value>
   </Type>
    <Description>
      Specifies whether to return the total number of couplings per the specified coupling type,
or the average number of couplings per the specified coupling type, or the total number of 
program units (such as classes or packages) whose coupling type is above the given threshold 
(specified below).
    </Description>
  </Parameter>
 <Parameter Name="type">
   <Type Name="Text" Default="class"/>
    <Description>
      Specifies the type of program unit whose coupling data will be processed.  This value 
depends upon the tool's capabilities. For example, the DependencyFinder sensor sends data for 
the 'class' level of program unit, while JDepend sends sensor data for the 'package' level of 
program unit. 
    </Description>
  </Parameter>
 <Parameter Name="threshold">
   <Type Name="Integer" Default="10" MinValue="0" MaxValue="1000"/>
    <Description>
      The threshold coupling value used when the mode is TotalAboveThreshold.
    </Description>
  </Parameter>
<Parameter Name="tool">
   <Type Name="Text" Default="DependencyFinder"/>
    <Description>
      The tool whose sensor data is used to generate this coupling data. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
streams CouplingStream(coupling, mode, type, threshold, tool) = {
  "Coupling associated with this project, coupling, mode, type, threshold, and tool.", 
  Coupling(coupling, mode, type, threshold, tool)
};
]]>
  </SourceCode>
</TelemetryDefinition>
<!-- ************************************************************************************** -->

<TelemetryDefinition Name="UnitTestStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of UnitTests associated with all
developers for the given mode.  The Mode parameter indicates what 
kinds of counts to return. If the cumulative parameter
is true, then the trend line represents the cumulative UnitTest counts. If false, then
the trend line represents the total UnitTest counts for each period individually. 
  </Description>
  <Parameter Name="mode">
    <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
    </Type>
    <Description>
      Specifies the type of count to return.
    </Description>
  </Parameter>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose UnitTest counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams UnitTestStream(mode, member, cumulative) = {
  "UnitTests for the given mode for this Project", 
  UnitTest(mode, member, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 


<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberUnitTestStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a set of streams indicating the number of UnitTests associated with each
project member for the given mode.  The Mode parameter indicates what 
kinds of counts to return. If the cumulative parameter
is true, then the trend line represents the cumulative UnitTest counts. If false, then
the trend line represents the total UnitTest counts for each period individually. 
  </Description>
  <Parameter Name="mode">
    <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
    </Type>
    <Description>
      Specifies the type of count to return.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams MemberUnitTestStream(mode, cumulative) = {
  "Member UnitTests for the given mode for this Project", 
  MemberUnitTest(mode, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CommitStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of Commits associated with 
developers.
  </Description>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose Commit counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative commit counts over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams CommitStream(member, cumulative) = {
  "Commit counts for the given mode for this Project", 
  Commit(member, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberCommitStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a set of streams indicating the number of Commits associated with 
each project member. 
  </Description>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative commit counts over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams MemberCommitStream(cumulative) = {
  "Commit counts for the given mode for each member of this Project", 
  MemberCommit(cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="ChurnStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the churn (lines added + lines deleted) associated with 
developers.
  </Description>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose Churn counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative churn counts over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams ChurnStream(member, cumulative) = {
  "Churn counts for the given member for this Project", 
  Churn(member, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberChurnStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a set of streams indicating the churn (lines added + lines deleted) associated with 
each project member.
  </Description>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative churn counts over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams MemberChurnStream(cumulative) = {
  "Churn counts for each member of this Project", 
  MemberChurn(cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 
 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CoverageStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the Coverage level for the given mode and 
granularity.  The Mode parameter indicates whether to return an integer indicating the 
percentage (between 0 and 100), the number of covered constructs, or the number of uncovered
constructs.  The granularity indicates the type of coverage, such as line, method, class, etc.
  </Description>
  <Parameter Name="mode">
    <Type Name="Enumerated" Default="Percentage">
      <Value>Percentage</Value>
      <Value>NumCovered</Value>
      <Value>NumUncovered</Value>
    </Type>
    <Description>
      Specifies whether to return the percentage coverage, or the number of covered or uncovered
      constructs. 
    </Description>
  </Parameter>
  <Parameter Name="granularity">
    <Type Name="Text" Default="method"/>
    <Description>
      The type of coverage value, such as line, method, class, etc.
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams CoverageStream(mode, granularity) = {
  "Coverage for the given mode and granularity for this Project", 
  Coverage(mode, granularity)
};
]]>
</SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="FileMetricStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating a FileMetric of a given SizeMetric.
  </Description>
  <Parameter Name="sizemetric">
    <Type Name="Text" Default="TotalLines"/>
    <Description>
      The type of FileMetric value to return, such as 'TotalLines'.
    </Description>
  </Parameter>
  <Parameter Name="tool">
    <Type Name="Text" Default="*"/>
    <Description>
      The tool whose FileMetric data is to be retrieved, or '*' for any tool.
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams FileMetricStream(sizemetric, tool) = {
  "FileMetrics of the given size metric.", 
  FileMetric(sizemetric, tool)
};
]]>
</SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CodeIssueStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the CodeIssue count associated with the specified tool and type.
  </Description>
  <Parameter Name="tool">
    <Type Name="Text" Default="*"/>
    <Description>
      The name of the tool whose CodeIssues are to be counted, or '*' for all tools.
    </Description>
  </Parameter>
 <Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The type of CodeIssue to count, or '*' for all types.
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams CodeIssueStream(tool, type) = {
  "Code Issues of the given tool and type.", 
  CodeIssue(tool, type)
};
]]>
</SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="BuildStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of Builds associated with the specified
developer with the specified result and type.  The member parameter should be either the 
member email or "*" to indicate that the build count aggregates all member counts. 
The result parameter should be either Success, Failure, or * to indicate all builds. 
The type parameter should be the value of the Type property to match in the build data, or "*"
to match all build data.
If the cumulative parameter
is true, then the trend line represents the cumulative Build counts. If false, then
the trend line represents the total Build counts for each period individually. 
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose Build counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="result">
    <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
    </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or all builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property that must match for the Build data to be counted.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams BuildStream(member, result, type, cumulative) = {
  "Builds for the given parameters for this Project", 
  Build(member, result, type, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="MemberBuildStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a set of streams indicating the number of Builds associated with each project
member with the specified result and type.  
The result parameter should be either Success, Failure, or * to indicate all builds. 
The type parameter should be the value of the Type property to match in the build data, or "*"
to match all build data. If the cumulative parameter
is true, then the trend line represents the cumulative Build counts. If false, then
the trend line represents the total Build counts for each period individually. 
  </Description>
   <Parameter Name="result">
    <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
    </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or all builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property that must match for the Build data to be counted.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams MemberBuildStream(result, type, cumulative) = {
  "Member Builds for the given parameters for this Project", 
  MemberBuild(result, type, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition>      

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="IssueStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of Commits associated with 
developers.
  </Description>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose Issue counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="status">
    <Type Name="Text" Default="all"/>
    <Description>
      If true, then the stream displays cumulative commit counts over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams IssueStream(member, status) = {
  "Issue counts for the given mode for this Project", 
  Issue(member, status)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxis" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxis(label) = {
  label, "integer"
};
]]>
  </SourceCode>
</TelemetryDefinition>

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxisZeroBased" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, sets the LowerBound to zero, and displays the specified label.
UpperBound is set to 1, but normally the actual chart data will result in a higher UpperBound.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxisZeroBased(label) = {
  label, "integer", 0, 1
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxisPercentage" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, sets the bounds to 0-100, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxisPercentage(label) = {
  label, "integer", 0, 100
};
]]>
  </SourceCode>
</TelemetryDefinition>            

</TelemetryDefinitions>