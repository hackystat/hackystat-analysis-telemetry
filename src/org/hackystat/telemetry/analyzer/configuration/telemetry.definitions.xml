<TelemetryDefinitions>

<!-- 
     The definitions in this file are the "essential", "minimal" definitions necessary 
     to support testing.  Basically, for each reduction function, this file creates a 
     Streams and Chart wrapper around it that provide access to all parameters and that
     enables the reduction function to be tested using these definitions.  
      
     If you want to provide additional telemetry definitions for actual users, then put
     them in the definitions/ directory. 
  -->

<TelemetryDefinition Name="DevTime" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the DevTime associated with given project member.
If the member parameter is "*", then the aggregate DevTime for all project members is 
returned.  If the cumulative parameter
is true, then the trend line represents the cumulative DevTime. If false, then
the trend line represents the total DevTime for each period individually.

DevTime measures the time during which developers are actively interacting with their
development tools at the grain size of five minutes.  
  </Description>

  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose DevTime is to be returned.  If "*", then the aggregrate 
      DevTime for all project members is returned.
    </Description>
  </Parameter>

  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the chart displays cumulative values over time. 
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
chart DevTime(member, cumulative) = {
  "Dev Time in hours", 
  (DevTimeStream(member, cumulative), yAxis("hours"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="UnitTest" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the UnitTest invocation counts associated with all
developers for the specified mode.  If the cumulative parameter
is true, then the trend line represents the cumulative DevTime. If false, then
the trend line represents the total counts for each period individually.
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
   </Type>
    <Description>
      Specifies the type of count to return.
    </Description>
  </Parameter>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Unit Test counts are to be returned.  If "*", then the aggregrate 
      Unit Test counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart UnitTest(mode, member, cumulative) = {
  "Unit test invocations", 
  (UnitTestStream(mode, member, cumulative), yAxis("UnitTest Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Coverage" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Coverage level for the given mode and granularity.
  </Description>
  <Parameter Name="mode">
   <Type Name="Enumerated" Default="Percentage">
      <Value>Percentage</Value>
      <Value>NumCovered</Value>
      <Value>NumUncovered</Value>
   </Type>
    <Description>
      Specifies the type of count to return, either the percentage covered or the absolute numbers
      of covered or uncovered constructs. 
    </Description>
  </Parameter>
 <Parameter Name="granularity">
    <Type Name="Text" Default="method"/>
    <Description>
      The type of coverage to look for in the sensor data, such as 'line', 'method', 'class', etc.
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Coverage(mode, granularity) = {
  "Coverage associated with this project, mode, and granularity", 
  (CoverageStream(mode, granularity), yAxis("Coverage"))
};
]]>
  </SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="FileMetric" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating FileMetrics of the given size metric.
  </Description>
 <Parameter Name="sizemetric">
    <Type Name="Text" Default="TotalLines"/>
    <Description>
      The type of size metric to search for in the FileMetric entries. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart FileMetric(sizemetric) = {
  "FileMetrics associated with this size metric.", 
  (FileMetricStream(sizemetric), yAxis(sizemetric))
};
]]>
  </SourceCode>
</TelemetryDefinition> 
 
<!-- ************************************************************************************** -->

<TelemetryDefinition Name="Build" DefinitionType="Chart" ShareScope="Global">
  <Description>
This chart provides a single stream indicating the Build invocation counts for the specified
developer, result, type, and cumulative values.
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email of the member whose Build counts are to be returned.  If "*", then the aggregrate 
      Build counts for all project members are returned.
    </Description>
  </Parameter>
  <Parameter Name="result">
   <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
   </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or both successful and
failing builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property to match in order for the Build data to be counted. This is
      useful, for example, for generating Build telemetry for only Integration Builds. 
      The default returns Build data for any type.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
  <SourceCode>
<![CDATA[
chart Build(member, result, type, cumulative) = {
  "Build invocations", 
  (BuildStream(member, result, type, cumulative), yAxis("Build Count"))
};
]]>
  </SourceCode>
</TelemetryDefinition>   
 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="DevTimeStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream provides a single stream indicating the DevTime associated with the given 
project member. If the member parameter is "*", then the single stream represents the aggregate
DevTime for all members.   If the cumulative parameter
is true, then the trend line represents the cumulative DevTime. If false, then
the trend line represents the total DevTime for each period individually.
  </Description>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose DevTime to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams DevTimeStream(member, cumulative) = {
  "Dev time for this Project", 
  DevTime("*", member, "**", cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="UnitTestStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of UnitTests associated with all
developers for the given mode.  The Mode parameter indicates what 
kinds of counts to return. If the cumulative parameter
is true, then the trend line represents the cumulative UnitTest counts. If false, then
the trend line represents the total UnitTest counts for each period individually. 
  </Description>
  <Parameter Name="mode">
    <Type Name="Enumerated" Default="TotalCount">
      <Value>TotalCount</Value>
      <Value>SuccessCount</Value>
      <Value>FailureCount</Value>
    </Type>
    <Description>
      Specifies the type of count to return.
    </Description>
  </Parameter>
  <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose UnitTest counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams UnitTestStream(mode, member, cumulative) = {
  "UnitTests for the given mode for this Project", 
  UnitTest(mode, member, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition> 

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="CoverageStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the Coverage level for the given mode and 
granularity.  The Mode parameter indicates whether to return an integer indicating the 
percentage (between 0 and 100), the number of covered constructs, or the number of uncovered
constructs.  The granularity indicates the type of coverage, such as line, method, class, etc.
  </Description>
  <Parameter Name="mode">
    <Type Name="Enumerated" Default="Percentage">
      <Value>Percentage</Value>
      <Value>NumCovered</Value>
      <Value>NumUncovered</Value>
    </Type>
    <Description>
      Specifies whether to return the percentage coverage, or the number of covered or uncovered
      constructs. 
    </Description>
  </Parameter>
  <Parameter Name="granularity">
    <Type Name="Text" Default="method"/>
    <Description>
      The type of coverage value, such as line, method, class, etc.
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams CoverageStream(mode, granularity) = {
  "Coverage for the given mode and granularity for this Project", 
  Coverage(mode, granularity)
};
]]>
</SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="FileMetricStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating a FileMetric of a given SizeMetric.
  </Description>
  <Parameter Name="sizemetric">
    <Type Name="Text" Default="TotalLines"/>
    <Description>
      The type of FileMetric value to return, such as 'TotalLines'.
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams FileMetricStream(sizemetric) = {
  "FileMetrics of the given size metric.", 
  FileMetric(sizemetric)
};
]]>
</SourceCode>
</TelemetryDefinition>   

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="BuildStream" DefinitionType="Streams" ShareScope="Global">
  <Description>
This stream returns a single stream indicating the number of Builds associated with the specified
developer with the specified result and type.  The member parameter should be either the 
member email or "*" to indicate that the build count aggregates all member counts. 
The result parameter should be either Success, Failure, or * to indicate all builds. 
The type parameter should be the value of the Type property to match in the build data, or "*"
to match all build data.
If the cumulative parameter
is true, then the trend line represents the cumulative Build counts. If false, then
the trend line represents the total Build counts for each period individually. 
  </Description>
 <Parameter Name="member">
    <Type Name="Text" Default="*"/>
    <Description>
      The email address of the member whose Build counts to return, or "*" for all members.
    </Description>
  </Parameter>
  <Parameter Name="result">
    <Type Name="Enumerated" Default="*">
      <Value>Success</Value>
      <Value>Failure</Value>
      <Value>*</Value>
    </Type>
    <Description>
      Specifies whether to return only successful builds, failing builds, or all builds.
    </Description>
  </Parameter>
<Parameter Name="type">
    <Type Name="Text" Default="*"/>
    <Description>
      The value of the Type property that must match for the Build data to be counted.
    </Description>
  </Parameter>
  <Parameter Name="cumulative">
    <Type Name="Boolean" Default="false"/>
    <Description>
      If true, then the stream displays cumulative values over time. 
    </Description>
  </Parameter>
<SourceCode>
<![CDATA[
streams BuildStream(member, result, type, cumulative) = {
  "Builds for the given parameters for this Project", 
  Build(member, result, type, cumulative)
};
]]>
</SourceCode>
</TelemetryDefinition>    

<!-- ************************************************************************************** -->

<TelemetryDefinition Name="yAxis" DefinitionType="YAxis" ShareScope="Global">
  <Description>
This axis uses integer as units, and displays the specified label.
  </Description>

  <Parameter Name="label">
    <Type Name="Text" Default="yAxis Label"/>
    <Description>
      The label associated with this yAxis.
    </Description>
  </Parameter>

  <SourceCode>
<![CDATA[
y-axis yAxis(label) = {
  label, "integer"
};
]]>
  </SourceCode>
</TelemetryDefinition>         

</TelemetryDefinitions>