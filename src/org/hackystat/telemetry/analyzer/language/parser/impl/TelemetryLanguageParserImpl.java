/* Generated By:JavaCC: Do not edit this line. TelemetryLanguageParserImpl.java */
  package org.hackystat.telemetry.analyzer.language.parser.impl;

  import java.util.ArrayList;
import java.util.List;

import org.hackystat.telemetry.analyzer.language.ast.ChartReference;
import org.hackystat.telemetry.analyzer.language.ast.Constant;
import org.hackystat.telemetry.analyzer.language.ast.DrawCommand;
import org.hackystat.telemetry.analyzer.language.ast.Expression;
import org.hackystat.telemetry.analyzer.language.ast.FunctionCall;
import org.hackystat.telemetry.analyzer.language.ast.NumberConstant;
import org.hackystat.telemetry.analyzer.language.ast.ReducerCall;
import org.hackystat.telemetry.analyzer.language.ast.StreamsReference;
import org.hackystat.telemetry.analyzer.language.ast.StringConstant;
import org.hackystat.telemetry.analyzer.language.ast.TelemetryChartDefinition;
import org.hackystat.telemetry.analyzer.language.ast.TelemetryChartYAxisDefinition;
import org.hackystat.telemetry.analyzer.language.ast.TelemetryReportDefinition;
import org.hackystat.telemetry.analyzer.language.ast.TelemetryStreamsDefinition;
import org.hackystat.telemetry.analyzer.language.ast.TextPosition;
import org.hackystat.telemetry.analyzer.language.ast.Variable;
import org.hackystat.telemetry.analyzer.language.ast.YAxisReference;
import org.hackystat.telemetry.analyzer.language.ast.TelemetryChartDefinition.SubChartDefinition;

  public class TelemetryLanguageParserImpl implements TelemetryLanguageParserImplConstants {

  final public String identifier() throws ParseException {
                       Token t;
    t = jj_consume_token(IDENTIFIER);
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String string_constant() throws ParseException {
                            @SuppressWarnings("unused")
                            String str; Token t;
    jj_consume_token(DOUBLEQUOTE);
      token_source.SwitchTo(COMMENT);
    t = jj_consume_token(STRING_INTERNAL);
      token_source.SwitchTo(DEFAULT);
    jj_consume_token(DOUBLEQUOTE);
      {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Number number_constant() throws ParseException {
                            @SuppressWarnings("unused")
                            Token t; boolean negative = false; Number number;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        break;
      case SUB:
        jj_consume_token(SUB);
                negative = true;
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    number = non_negative_number_constant();
     if (negative) {
       if (number instanceof Integer) {
         {if (true) return new Integer(0 - number.intValue());}
       }
       else {
         {if (true) return new Double(0.0 - number.doubleValue());}
       }
     }
     else {
       {if (true) return number;}
     }
    throw new Error("Missing return statement in function");
  }

  final public Number non_negative_number_constant() throws ParseException {
                                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON_NEG_INTEGER:
      t = jj_consume_token(NON_NEG_INTEGER);
                             {if (true) return new Integer(t.image);}
      break;
    case NON_NEG_DOUBLE:
      t = jj_consume_token(NON_NEG_DOUBLE);
                             {if (true) return new Double(t.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                           Main Grammar
//
//==========================================================================
  @SuppressWarnings("unchecked")
  final public List all_input() throws ParseException {
                     List list;
    list = statements();
    jj_consume_token(0);
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unchecked")
  final public List statements() throws ParseException {
  List list = new ArrayList(2);
  TelemetryStreamsDefinition streamsDef;
  TelemetryChartDefinition chartDef;
  TelemetryReportDefinition reportDef;
  TelemetryChartYAxisDefinition chartYAxisDef;
  DrawCommand drawCommand;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STREAMS:
        streamsDef = streams_statement();
                                                   list.add(streamsDef);
        break;
      case CHART:
        chartDef = chart_statement();
                                                   list.add(chartDef);
        break;
      case REPORT:
        reportDef = report_statement();
                                                   list.add(reportDef);
        break;
      case YAXIS:
        chartYAxisDef = chart_y_axis_statement();
                                                   list.add(chartYAxisDef);
        break;
      case DRAW:
        drawCommand = draw_command();
                                                   list.add(drawCommand);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STREAMS:
      case CHART:
      case REPORT:
      case DRAW:
      case YAXIS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public TelemetryStreamsDefinition streams_statement_input() throws ParseException {
                                                        TelemetryStreamsDefinition def;
    def = streams_statement();
    jj_consume_token(0);
    {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public TelemetryChartDefinition chart_statement_input() throws ParseException {
                                                    TelemetryChartDefinition def;
    def = chart_statement();
    jj_consume_token(0);
    {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public TelemetryChartYAxisDefinition chart_y_axis_statement_input() throws ParseException {
                                                                TelemetryChartYAxisDefinition def;
    def = chart_y_axis_statement();
    jj_consume_token(0);
    {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

  final public TelemetryReportDefinition report_statement_input() throws ParseException {
                                                      TelemetryReportDefinition def;
    def = report_statement();
    jj_consume_token(0);
    {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                       TelemetryStreamsDefinition
//
//==========================================================================
  final public TelemetryStreamsDefinition streams_statement() throws ParseException {
  String id;
  String description;
  Expression expression;
  Variable[] vars;
  Token startToken, endToken;
    startToken = jj_consume_token(STREAMS);
    id = identifier();
    jj_consume_token(LPARA);
    vars = variables();
    jj_consume_token(RPARA);
    jj_consume_token(25);
    jj_consume_token(26);
    description = streams_description();
    jj_consume_token(COMMA);
    expression = streams_definition();
    jj_consume_token(27);
    endToken = jj_consume_token(SEMICOLON);
    try {
      TextPosition position = new TextPosition(startToken.beginLine, startToken.beginColumn, endToken.endLine, endToken.endColumn);
      TelemetryStreamsDefinition streamsDef = new TelemetryStreamsDefinition(id, expression, vars, position);
      streamsDef.setDescription(description);
      {if (true) return streamsDef;}
    }
    catch (Exception ex) {
      {if (true) throw new ParseException(ex.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

  final public String streams_description() throws ParseException {
                                 String description;
    description = string_constant();
    {if (true) return description;}
    throw new Error("Missing return statement in function");
  }

  final public Expression streams_definition() throws ParseException {
                                   Expression exp;
    exp = expression();
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                        TelemetryChartYAxis
//
//==========================================================================
//y-axis fileAxis() = {"Size (LOC)", "integer|double", 0, 1000} 
  final public TelemetryChartYAxisDefinition chart_y_axis_statement() throws ParseException {
  String id; Variable[] vars; Expression labelParameter; String strLabel;
  String numberType = TelemetryChartYAxisDefinition.NUMBER_TYPE_AUTO;
  Number lowerBound = null; Number upperBound = null;
  Token startToken, endToken;
    startToken = jj_consume_token(YAXIS);
    id = identifier();
    jj_consume_token(LPARA);
    vars = variables();
    jj_consume_token(RPARA);
    jj_consume_token(25);
    jj_consume_token(26);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOUBLEQUOTE:
      strLabel = string_constant();
                                         labelParameter = new StringConstant(strLabel);
      break;
    case IDENTIFIER:
      strLabel = identifier();
                                         labelParameter = new Variable(strLabel);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      numberType = string_constant();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        lowerBound = number_constant();
        jj_consume_token(COMMA);
        upperBound = number_constant();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(27);
    endToken = jj_consume_token(SEMICOLON);
    try {
      TextPosition position = new TextPosition(startToken.beginLine, startToken.beginColumn, endToken.endLine, endToken.endColumn);
      {if (true) return new TelemetryChartYAxisDefinition(id, vars, labelParameter, numberType, lowerBound, upperBound, position);}
    }
    catch (Exception ex) {
      {if (true) throw new ParseException(ex.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                        TelemetryChartDefinition
//
//==========================================================================
  @SuppressWarnings("unchecked")
  final public TelemetryChartDefinition chart_statement() throws ParseException {
  String id;
  String title;
  Variable[] vars;
  List<SubChartDefinition> subCharts;
  Token startToken, endToken;
    startToken = jj_consume_token(CHART);
    id = identifier();
    jj_consume_token(LPARA);
    vars = variables();
    jj_consume_token(RPARA);
    jj_consume_token(25);
    jj_consume_token(26);
    title = chart_title();
    jj_consume_token(COMMA);
    subCharts = sub_charts();
    jj_consume_token(27);
    endToken = jj_consume_token(SEMICOLON);
    try {
      TextPosition position = new TextPosition(startToken.beginLine, startToken.beginColumn, endToken.endLine, endToken.endColumn);
      {if (true) return new TelemetryChartDefinition(id, title, vars, subCharts, position);}
    }
    catch(Exception ex) {
      {if (true) throw new ParseException(ex.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

  final public String chart_title() throws ParseException {
                         String title;
    title = string_constant();
    {if (true) return title;}
    throw new Error("Missing return statement in function");
  }

//List<TelemetryChartDefinition.SubChartDefinition>
  @SuppressWarnings("unchecked")
  final public List sub_charts() throws ParseException {
                     List list = new ArrayList(); TelemetryChartDefinition.SubChartDefinition subChartDef;
    subChartDef = sub_chart_definition();
                                                     list.add(subChartDef);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      subChartDef = sub_chart_definition();
                                                     list.add(subChartDef);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public TelemetryChartDefinition.SubChartDefinition sub_chart_definition() throws ParseException {
                                                                      StreamsReference streamsRef; YAxisReference yAxisRef;
    jj_consume_token(LPARA);
    streamsRef = streams_reference();
    jj_consume_token(COMMA);
    yAxisRef = y_axis_reference();
    jj_consume_token(RPARA);
    {if (true) return new TelemetryChartDefinition.SubChartDefinition(streamsRef, yAxisRef);}
    throw new Error("Missing return statement in function");
  }

  final public StreamsReference streams_reference() throws ParseException {
                                        String id; Expression[] params;
    id = identifier();
    jj_consume_token(LPARA);
    params = variables_and_constants();
    jj_consume_token(RPARA);
    {if (true) return new StreamsReference(id, params);}
    throw new Error("Missing return statement in function");
  }

  final public YAxisReference y_axis_reference() throws ParseException {
                                     String id; Expression[] params;
    id = identifier();
    jj_consume_token(LPARA);
    params = variables_and_constants();
    jj_consume_token(RPARA);
    {if (true) return new YAxisReference(id, params);}
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                        TelemetryReportDefinition
//
//==========================================================================
  @SuppressWarnings("unchecked")
  final public TelemetryReportDefinition report_statement() throws ParseException {
  String id;
  String title;
  Variable[] vars;
  List reportDefinition;
  Token startToken, endToken;
    startToken = jj_consume_token(REPORT);
    id = identifier();
    jj_consume_token(LPARA);
    vars = variables();
    jj_consume_token(RPARA);
    jj_consume_token(25);
    jj_consume_token(26);
    title = report_title();
    jj_consume_token(COMMA);
    reportDefinition = report_definition();
    jj_consume_token(27);
    endToken = jj_consume_token(SEMICOLON);
    try {
      TextPosition position = new TextPosition(startToken.beginLine, startToken.beginColumn, endToken.endLine, endToken.endColumn);
      {if (true) return new TelemetryReportDefinition(id, title, vars, reportDefinition, position);}
    }
    catch(Exception ex) {
      {if (true) throw new ParseException(ex.getMessage());}
    }
    throw new Error("Missing return statement in function");
  }

  final public String report_title() throws ParseException {
                         String title;
    title = string_constant();
    {if (true) return title;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unchecked")
  final public List report_definition() throws ParseException {
                            List list = new ArrayList(); ChartReference ref;
    ref = chart_reference();
                            list.add(ref);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ref = chart_reference();
      list.add(ref);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ChartReference chart_reference() throws ParseException {
                                    @SuppressWarnings("unused")
                                    ChartReference ref; String id; Expression[] params;
    id = identifier();
    jj_consume_token(LPARA);
    params = variables_and_constants();
    jj_consume_token(RPARA);
    {if (true) return new ChartReference(id, params);}
    throw new Error("Missing return statement in function");
  }

//==============================================================================
//
//                            DrawCommand
//
//==============================================================================
  final public DrawCommand draw_command() throws ParseException {
  String id; Constant[] params; Token startToken, endToken;
    startToken = jj_consume_token(DRAW);
    id = identifier();
    jj_consume_token(LPARA);
    params = constants();
    jj_consume_token(RPARA);
    endToken = jj_consume_token(SEMICOLON);
    TextPosition position = new TextPosition(startToken.beginLine, startToken.beginColumn, endToken.endLine, endToken.endColumn);
    {if (true) return new DrawCommand(id, params, position);}
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//           Expression
//
//==========================================================================
  final public Expression expression() throws ParseException {
                            Expression exp;
    exp = additive_expression();
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression additive_expression() throws ParseException {
                                     Expression exp1, exp2;
    exp1 = multiplicative_expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        exp2 = multiplicative_expression();
      exp1 = new FunctionCall("Add", new Expression[]{exp1, exp2});
        break;
      case SUB:
        jj_consume_token(SUB);
        exp2 = multiplicative_expression();
      exp1 = new FunctionCall("Sub", new Expression[]{exp1, exp2});
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression multiplicative_expression() throws ParseException {
                                           Expression exp1, exp2;
    exp1 = unary_expression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        exp2 = unary_expression();
      exp1 = new FunctionCall("Mul", new Expression[]{exp1, exp2});
        break;
      case DIV:
        jj_consume_token(DIV);
        exp2 = unary_expression();
      exp1 = new FunctionCall("Div", new Expression[]{exp1, exp2});
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression unary_expression() throws ParseException {
                                 Number number; Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NON_NEG_INTEGER:
    case NON_NEG_DOUBLE:
      number = non_negative_number_constant();
                                                  {if (true) return new NumberConstant(number);}
      break;
    case LPARA:
      jj_consume_token(LPARA);
      exp = expression();
      jj_consume_token(RPARA);
                                                  {if (true) return exp;}
      break;
    case IDENTIFIER:
      exp = call();
                                                  {if (true) return exp;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression call() throws ParseException {
                     String name; Expression[] params;
    name = identifier();
    jj_consume_token(LPARA);
    params = parameters();
    jj_consume_token(RPARA);
    //Requirement: ReducerCall cannot have FunctionCall as its parameter
    //             FunctionCall must have at least one parameter of type ReducerCall or FunctionCall  
    //We return either ReducerCall or FunctionCall object here.

    boolean isReducerCall = true;
    for (int i = 0; i < params.length; i++) {
      Expression param = params[i];
      if (param instanceof ReducerCall || param instanceof FunctionCall) {
        isReducerCall = false;
        break;
      }
    }

    if (isReducerCall) {
      {if (true) return new ReducerCall(name, params);}
    }
    else {
      {if (true) return new FunctionCall(name, params);}
    }
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unchecked")
  final public Expression[] parameters() throws ParseException {
                              ArrayList list = new ArrayList(); Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case LPARA:
    case DOUBLEQUOTE:
    case NON_NEG_INTEGER:
    case NON_NEG_DOUBLE:
    case IDENTIFIER:
      exp = parameter();
                                    list.add(exp);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        exp = parameter();
                                    list.add(exp);
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    int size = list.size();
    Expression[] exps = new Expression[size];
    for (int i = 0; i < size; i++) {
      exps[i] = (Expression) list.get(i);
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parameter() throws ParseException {
                          String str; Number num; Expression exp;
    if (jj_2_1(2)) {
      exp = expression();
                                       {if (true) return exp;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        str = identifier();
                                 {if (true) return new Variable(str);}
        break;
      case ADD:
      case SUB:
      case NON_NEG_INTEGER:
      case NON_NEG_DOUBLE:
        num = number_constant();
                                   {if (true) return new NumberConstant(num);}
        break;
      case DOUBLEQUOTE:
        str = string_constant();
                                 {if (true) return new StringConstant(str);}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

//==========================================================================
//
//                       Common Support
//
//==========================================================================
  @SuppressWarnings("unchecked")
  final public Variable[] variables() throws ParseException {
                          ArrayList list = new ArrayList(); String id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = identifier();
                          list.add(new Variable(id));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        id = identifier();
                                   list.add(new Variable(id));
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    int size = list.size();
    Variable[] exps = new Variable[size];
    for (int i = 0; i < size; i++) {
      exps[i] = (Variable) list.get(i);
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unchecked")
  final public Constant[] constants() throws ParseException {
                          ArrayList list = new ArrayList(); String str; Number num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case DOUBLEQUOTE:
    case NON_NEG_INTEGER:
    case NON_NEG_DOUBLE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
      case NON_NEG_INTEGER:
      case NON_NEG_DOUBLE:
        num = number_constant();
                                       list.add(new NumberConstant(num));
        break;
      case DOUBLEQUOTE:
        str = string_constant();
                                       list.add(new StringConstant(str));
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case NON_NEG_INTEGER:
        case NON_NEG_DOUBLE:
          num = number_constant();
                                         list.add(new NumberConstant(num));
          break;
        case DOUBLEQUOTE:
          str = string_constant();
                                         list.add(new StringConstant(str));
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    int size = list.size();
    Constant[] exps = new Constant[size];
    for (int i = 0; i < size; i++) {
      exps[i] = (Constant) list.get(i);
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  @SuppressWarnings("unchecked")
  final public Expression[] variables_and_constants() throws ParseException {
                                          ArrayList list = new ArrayList(); String str; Number num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case DOUBLEQUOTE:
    case NON_NEG_INTEGER:
    case NON_NEG_DOUBLE:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
      case NON_NEG_INTEGER:
      case NON_NEG_DOUBLE:
        num = number_constant();
                                       list.add(new NumberConstant(num));
        break;
      case DOUBLEQUOTE:
        str = string_constant();
                                       list.add(new StringConstant(str));
        break;
      case IDENTIFIER:
        str = identifier();
                                       list.add(new Variable(str));
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case NON_NEG_INTEGER:
        case NON_NEG_DOUBLE:
          num = number_constant();
                                         list.add(new NumberConstant(num));
          break;
        case DOUBLEQUOTE:
          str = string_constant();
                                         list.add(new StringConstant(str));
          break;
        case IDENTIFIER:
          str = identifier();
                                         list.add(new Variable(str));
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    int size = list.size();
    Expression[] exps = new Expression[size];
    for (int i = 0; i < size; i++) {
      exps[i] = (Expression) list.get(i);
    }
    {if (true) return exps;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_27()) return true;
    if (jj_scan_token(LPARA)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(LPARA)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(NON_NEG_DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(NON_NEG_INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    return false;
  }

  public TelemetryLanguageParserImplTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xc00,0xc00,0x180000,0x3e0,0x3e0,0x210000,0x20000,0x20000,0x20000,0x20000,0xc00,0xc00,0x3000,0x3000,0x384000,0x20000,0x394c00,0x390c00,0x20000,0x200000,0x190c00,0x20000,0x190c00,0x190c00,0x390c00,0x20000,0x390c00,0x390c00,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public TelemetryLanguageParserImpl(java.io.InputStream stream) {
     this(stream, null);
  }
  public TelemetryLanguageParserImpl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TelemetryLanguageParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TelemetryLanguageParserImpl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TelemetryLanguageParserImplTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public TelemetryLanguageParserImpl(TelemetryLanguageParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(TelemetryLanguageParserImplTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  @SuppressWarnings("unchecked")
  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  @SuppressWarnings("unchecked")
  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  @SuppressWarnings("unchecked")
  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[28];
    for (int i = 0; i < 28; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
